FROM 764525110978.dkr.ecr.us-west-2.amazonaws.com/alpine-node:22.9.0-alpine-3.20-arm AS builder

USER root
ENV NEXT_TELEMETRY_DISABLED=1

WORKDIR /app

RUN apk upgrade
RUN apk add --update --no-cache bash



RUN --mount=type=secret,id=npm_token,dst=./.npm_token,uid=1000 export ARTIFACTORY_RO_TOKEN=$(cat .npm_token) \
  && npm ci

# Copy everything - unneeded stuff gets filtered out in the `app-prod-filter` docker target
COPY . .

FROM builder AS app-prod-preparer

RUN NODE_ENV=production npm run build

RUN --mount=type=secret,id=npm_token,dst=./.npm_token,uid=1000 export ARTIFACTORY_RO_TOKEN=$(cat .npm_token) \
  && npm prune --production

FROM 764525110978.dkr.ecr.us-west-2.amazonaws.com/alpine-node:22.9.0-alpine-3.20-arm AS app-prod-filter

WORKDIR /app
COPY --from=app-prod-preparer /app/package.json /app/gasket.config.js /app/start-me-first.js ./
COPY --from=app-prod-preparer /app/node_modules ./node_modules
COPY --from=app-prod-preparer /app/config ./config
COPY --from=app-prod-preparer /app/.next ./.next
COPY --from=app-prod-preparer /app/lib ./lib
COPY --from=app-prod-preparer /app/redux ./redux
COPY --from=app-prod-preparer /app/public ./public

# Special final stage to benefit from caching the build stage, and to ensure the smallest/cleanest image we can muster
FROM 764525110978.dkr.ecr.us-west-2.amazonaws.com/alpine-node:22.9.0-alpine-3.20-arm AS app

USER root

COPY --from=app-prod-filter --chown=worker:worker /app /app

USER worker
WORKDIR /app

ENV AUTO_TLS_ENABLED=true
EXPOSE 8443

CMD ["npm", "run", "start"]
